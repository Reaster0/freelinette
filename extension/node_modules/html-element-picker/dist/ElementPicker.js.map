{"version":3,"sources":["ElementPicker.js"],"names":["ElementPicker","[object Object]","options","this","hoverBox","document","createElement","style","position","pointerEvents","mergedOptions","container","body","selectors","background","borderWidth","transition","ignoreElements","action","Object","keys","forEach","key","_detectMouseMove","e","_previousEvent","target","indexOf","matches","contains","hoveredElement","elementsFromPoint","clientX","clientY","_previousTarget","targetOffset","getBoundingClientRect","targetHeight","height","targetWidth","width","top","window","scrollY","left","scrollX","_triggered","callback","addEventListener","_container","value","HTMLElement","Error","appendChild","_background","_transition","_borderWidth","_redetectMouseMove","_selectors","_ignoreElements","_action","trigger","_triggerListener","removeEventListener","undefined","module","exports"],"mappings":"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","file":"ElementPicker.js","sourcesContent":["(function () {\r\n    class ElementPicker {\r\n        constructor(options) {\r\n            // MUST create hover box first before applying options\r\n            this.hoverBox = document.createElement(\"div\");\r\n            this.hoverBox.style.position = \"absolute\";\r\n            this.hoverBox.style.pointerEvents = \"none\";\r\n\r\n            const defaultOptions = {\r\n                container: document.body,\r\n                selectors: \"*\", // default to pick all elements\r\n                background: \"rgba(153, 235, 255, 0.5)\", // transparent light blue\r\n                borderWidth: 5,\r\n                transition: \"all 150ms ease\", // set to \"\" (empty string) to disable\r\n                ignoreElements: [document.body],\r\n                action: {},\r\n            }\r\n            const mergedOptions = {\r\n                ...defaultOptions,\r\n                ...options\r\n            };\r\n            Object.keys(mergedOptions).forEach((key) => {\r\n                this[key] = mergedOptions[key];\r\n            });\r\n\r\n            this._detectMouseMove = (e) => {\r\n                this._previousEvent = e;\r\n                let target = e.target;\r\n                // console.log(\"TCL: ElementPicker -> this._moveHoverBox -> target\", target)\r\n                if (this.ignoreElements.indexOf(target) === -1 && target.matches(this.selectors) &&\r\n                    this.container.contains(target) ||\r\n                    target === this.hoverBox) { // is NOT ignored elements\r\n                    // console.log(\"TCL: target\", target);\r\n                    if (target === this.hoverBox) {\r\n                        // the truely hovered element behind the added hover box\r\n                        const hoveredElement = document.elementsFromPoint(e.clientX, e.clientY)[1];\r\n                        // console.log(\"screenX: \" + e.screenX);\r\n                        // console.log(\"screenY: \" + e.screenY);\r\n                        // console.log(\"TCL: hoveredElement\", hoveredElement);\r\n                        if (this._previousTarget === hoveredElement) {\r\n                            // avoid repeated calculation and rendering\r\n                            return;\r\n                        } else {\r\n                            target = hoveredElement;\r\n                        }\r\n                    } else {\r\n                        this._previousTarget = target;\r\n                    }\r\n                    const targetOffset = target.getBoundingClientRect();\r\n                    const targetHeight = targetOffset.height;\r\n                    const targetWidth = targetOffset.width;\r\n\r\n                    this.hoverBox.style.width = targetWidth + this.borderWidth * 2 + \"px\";\r\n                    this.hoverBox.style.height = targetHeight + this.borderWidth * 2 + \"px\";\r\n                    // need scrollX and scrollY to account for scrolling\r\n                    this.hoverBox.style.top = targetOffset.top + window.scrollY - this.borderWidth + \"px\";\r\n                    this.hoverBox.style.left = targetOffset.left + window.scrollX - this.borderWidth + \"px\";\r\n                    if (this._triggered && this.action.callback) {\r\n                        this.action.callback(target);\r\n                        this._triggered = false;\r\n                    }\r\n                } else {\r\n                    // console.log(\"hiding hover box...\");\r\n                    this.hoverBox.style.width = 0;\r\n                }\r\n            };\r\n            document.addEventListener(\"mousemove\", this._detectMouseMove);\r\n        }\r\n        get container() {\r\n            return this._container;\r\n        }\r\n        set container(value) {\r\n            if (value instanceof HTMLElement) {\r\n                this._container = value;\r\n                this.container.appendChild(this.hoverBox);\r\n            } else {\r\n                throw new Error(\"Please specify an HTMLElement as container!\");\r\n            }\r\n        }\r\n        get background() {\r\n            return this._background;\r\n        }\r\n        set background(value) {\r\n            this._background = value;\r\n\r\n            this.hoverBox.style.background = this.background;\r\n        }\r\n        get transition() {\r\n            return this._transition;\r\n        }\r\n        set transition(value) {\r\n            this._transition = value;\r\n\r\n            this.hoverBox.style.transition = this.transition;\r\n        }\r\n        get borderWidth() {\r\n            return this._borderWidth;\r\n        }\r\n        set borderWidth(value) {\r\n            this._borderWidth = value;\r\n\r\n            this._redetectMouseMove();\r\n        }\r\n        get selectors() {\r\n            return this._selectors;\r\n        }\r\n        set selectors(value) {\r\n            this._selectors = value;\r\n\r\n            this._redetectMouseMove();\r\n        }\r\n        get ignoreElements() {\r\n            return this._ignoreElements;\r\n        }\r\n        set ignoreElements(value) {\r\n            this._ignoreElements = value;\r\n\r\n            this._redetectMouseMove();\r\n        }\r\n        get action() {\r\n            return this._action;\r\n        }\r\n        set action(value) {\r\n            if (value instanceof Object) {\r\n                if (typeof value.trigger === \"string\" &&\r\n                    typeof value.callback === \"function\") {\r\n                    if (this._triggerListener) {\r\n                        document.removeEventListener(this.action.trigger, this._triggerListener);\r\n                        this._triggered = false;\r\n                    }\r\n                    this._action = value;\r\n\r\n                    this._triggerListener = () => {\r\n                        this._triggered = true;\r\n                        this._redetectMouseMove();\r\n                    }\r\n                    document.addEventListener(this.action.trigger, this._triggerListener);\r\n                } else if (value.trigger !== undefined || value.callback !== undefined){ // allow empty action object\r\n                    throw new Error(\"action must include two keys: trigger (String) and callback (function)!\");\r\n                }\r\n            } else {\r\n                throw new Error(\"action must be an object!\");\r\n            }\r\n        }\r\n        _redetectMouseMove() {\r\n            if (this._detectMouseMove && this._previousEvent) {\r\n                this._detectMouseMove(this._previousEvent);\r\n            }\r\n        }\r\n    }\r\n    // export module\r\n    if (typeof module !== 'undefined' && typeof module.exports !== 'undefined') {\r\n        module.exports = ElementPicker;\r\n    } else {\r\n        window.ElementPicker = ElementPicker;\r\n    }\r\n})();"]}